@using SmartHome.Connection.Interfaces;
@using SmartHome.Connection.Services;
@inject DelayService _delayService;

<div class="card" style="width: 100%; max-width: 25rem;">
    <div class="card-body">

        <h5 class="card-title"> @(_isBulb ? "💡" : "🔌") @SmartDevice.Alias (<i>@SmartDevice.Model.Replace("(US)", string.Empty)</i>)</h5>
        <code>@SmartDevice.IPAddress</code>

        <hr />
        @if (_isPlug)
        {
            <SmartPlugControl SmartPlug="SmartDevice as ISmartPlug"></SmartPlugControl>
        }
        else if (_isBulb)
        {
            <SmartBulbControl SmartBulb="SmartDevice as ISmartBulb"></SmartBulbControl>
        }
        <button type="button" class="btn col-12 @(_poweredOn ? "btn-warning" : "btn-dark")" @onclick="TogglePower">@(_poweredOn ? "Turn Off" : "Turn On")</button>
    </div>
</div>

@code {
    private bool _isBulb => SmartDevice is ISmartBulb;
    private bool _isPlug => SmartDevice is ISmartPlug;


    private bool _poweredOn;

    public bool PoweredOn
    {
        get  => _poweredOn;
        set 
        {
            SmartDevice.On = value;
            _delayService.WaitForDeviceToUpdate();
            _poweredOn = value; 
        }
    }

    [Parameter]
    public ISmartDevice SmartDevice { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        PoweredOn = SmartDevice.On;
    }

    private void TogglePower()
    {
        PoweredOn = !PoweredOn;
    }
}